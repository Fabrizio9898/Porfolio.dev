---
import { LANGUAGE_CODES } from "../../i18n";

interface Language {
  name: string;
  abbreviation: string;
  code: string;
}

const LANGUAGES: Language[] = [
  {
    name: "Español",
    abbreviation: "ES",
    code: "es",
  },
  {
    name: "English",
    abbreviation: "EN",
    code: "en",
  },
];
---

<div class="relative flex">
  <button
    transition:persist
    id="languages-menu-btn"
    aria-label="Seleccionar idioma"
    class="language-button appearance-none flex hover:scale-125 transition"
  >
    <span id="selected-language" class="button-text text-sm font-medium text-gray-500 dark:text-gray-200">ES</span>
    <div class="arrow-icon dark:text-gray-200 text-gray-500">▼</div>
  </button>
  <div
    transition:persist
    id="languages-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        LANGUAGES.map((lang) => (
          <li
            class="languages-menu-option px-2 py-1.5 cursor-pointer hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm"
            data-abbreviation={lang.abbreviation}
            data-code={lang.code}
          >
            {lang.name}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  .language-button {
    display: flex;
    align-items: center;
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0.3rem;
    z-index: 10;
    font-size: 1rem;
  }

  .language-button:focus {
    outline: none;
  }

  

  #languages-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>
<script>
  import { atom } from "nanostores";
  import { getI18 } from "../../i18n";

  interface Language {
    name: string;
    abbreviation: string;
    code: string;
  }

  interface I18n {
    PORTFOLIO_TITLE: string;
    [key: string]: string;
  }

  const LANGUAGES: Language[] = [
    {
      name: "Español",
      abbreviation: "ES",
      code: "es",
    },
    {
      name: "English",
      abbreviation: "EN",
      code: "en",
    },
  ];

  const currentLanguage = atom<string>("es");

  const languagesMenu = document.getElementById(
    "languages-menu",
  ) as HTMLDivElement;
  const languageButton = document.getElementById(
    "languages-menu-btn",
  ) as HTMLButtonElement;
  const selectedLanguageSpan = document.getElementById(
    "selected-language",
  ) as HTMLSpanElement;

  const getLanguagePreference = (): string => {
    return localStorage.getItem("language") || "es";
  };

  const updateLanguage = (code: string, abbreviation: string): void => {
    localStorage.setItem("language", code);
    selectedLanguageSpan.textContent = abbreviation;
    currentLanguage.set(code);
    document.documentElement.lang = code;

    const i18n = getI18({ currentLocale: code });
    updateTranslations(i18n);
  };

  const updateTranslations = (i18n: I18n): void => {
    document.title = i18n.PORTFOLIO_TITLE;

    document.querySelectorAll("[data-i18n]").forEach((element) => {
      const key = element.getAttribute("data-i18n");
      if (key && i18n[key]) {
        element.textContent = i18n[key];
      }
    });

    window.dispatchEvent(
      new CustomEvent("languageChanged", { detail: { i18n } }),
    );
  };

  const storedLanguage = getLanguagePreference();
  const initialLanguage =
    LANGUAGES.find((lang) => lang.code === storedLanguage) || LANGUAGES[0];
  updateLanguage(initialLanguage.code, initialLanguage.abbreviation);

  languageButton.addEventListener("click", (e: Event) => {
    e.stopPropagation();
    languagesMenu.classList.toggle("open");
  });

  document.addEventListener("click", () =>
    languagesMenu.classList.remove("open"),
  );

  document
    .querySelectorAll<HTMLLIElement>(".languages-menu-option")
    .forEach((element) => {
      element.addEventListener("click", (e: Event) => {
        const target = e.target as HTMLLIElement;
        const abbreviation = target.dataset.abbreviation;
        const code = target.dataset.code;
        if (abbreviation && code) {
          updateLanguage(code, abbreviation);
          languagesMenu.classList.remove("open");
        }
      });
    });

  currentLanguage.subscribe(async (lang: string) => {
    const i18n = getI18({ currentLocale: lang });
    updateTranslations(i18n);
  });

  document.addEventListener("astro:after-swap", () => {
    const storedLanguage = getLanguagePreference();
    const language =
      LANGUAGES.find((lang) => lang.code === storedLanguage) || LANGUAGES[0];
    updateLanguage(language.code, language.abbreviation);
  });
</script>
